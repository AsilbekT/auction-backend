# Generated by Django 5.1.3 on 2024-12-04 12:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='The first name of the property owner', max_length=100)),
                ('last_name', models.CharField(help_text='The last name of the property owner', max_length=100)),
                ('dob', models.DateField(help_text='Date of birth of the property owner')),
                ('dod', models.DateField(blank=True, help_text='Date of death of the property owner, if applicable', null=True)),
                ('mailing_address', models.CharField(help_text='The mailing address of the property owner', max_length=255)),
                ('mailing_city', models.CharField(help_text='The city of the mailing address', max_length=100)),
                ('mailing_state', models.CharField(help_text='The state of the mailing address', max_length=100)),
                ('mailing_zip', models.CharField(help_text='The ZIP code of the mailing address', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_address', models.EmailField(help_text='The email address', max_length=254)),
                ('contact_information', models.ForeignKey(help_text='The contact information record to which this email address belongs', on_delete=django.db.models.deletion.CASCADE, to='api.contactinformation')),
            ],
        ),
        migrations.AddField(
            model_name='contactinformation',
            name='owner',
            field=models.ForeignKey(help_text='The owner for whom this contact information applies', on_delete=django.db.models.deletion.CASCADE, to='api.owner'),
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_type', models.CharField(choices=[('Associate', 'Associate'), ('Relative', 'Relative'), ('Neighbor', 'Neighbor')], help_text='The type of connection, e.g., Associate, Relative, Neighbor', max_length=10)),
                ('name', models.CharField(help_text='Full name of the connected individual', max_length=255)),
                ('address', models.CharField(help_text='Address of the connected individual', max_length=255)),
                ('phone', models.CharField(help_text='Phone number of the connected individual', max_length=20)),
                ('owner', models.ForeignKey(help_text='The owner associated with this connection', on_delete=django.db.models.deletion.CASCADE, to='api.owner')),
            ],
        ),
        migrations.CreateModel(
            name='Phone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_type', models.CharField(help_text='The type of phone, e.g., Mobile, Home, Work', max_length=100)),
                ('phone_connected', models.BooleanField(default=False, help_text='Indicator of whether the phone number is active and connected')),
                ('phone_number', models.CharField(help_text='The phone number', max_length=20)),
                ('contact_information', models.ForeignKey(help_text='The contact information record to which this phone number belongs', on_delete=django.db.models.deletion.CASCADE, to='api.contactinformation')),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(help_text='The full street address of the property', max_length=255)),
                ('city', models.CharField(help_text='The city where the property is located', max_length=100)),
                ('state', models.CharField(help_text='The state where the property is located', max_length=100)),
                ('zip_code', models.CharField(help_text='The postal code for the property', max_length=20)),
                ('county', models.CharField(help_text='The county where the property is located', max_length=100)),
                ('apn', models.CharField(db_index=True, help_text="The assessor's parcel number, unique identifier for the property", max_length=100, unique=True)),
                ('property_type', models.CharField(choices=[('SF', 'Single Family'), ('MF', 'Multi Family'), ('CM', 'Commercial')], help_text='The type of property, e.g., Single Family, Multi Family, Commercial', max_length=2)),
                ('lot_size', models.IntegerField(help_text='The size of the property lot in square feet')),
                ('year_built', models.IntegerField(help_text='The year in which the property was built')),
                ('zillow_link', models.URLField(blank=True, help_text="A direct link to the property's Zillow page, if available", null=True)),
                ('occupancy_status', models.CharField(choices=[('V', 'Vacant'), ('O', 'Occupied')], help_text='Occupancy status of the property, e.g., Vacant, Occupied', max_length=1)),
                ('beds', models.IntegerField(help_text='Number of bedrooms in the property')),
                ('baths', models.IntegerField(help_text='Number of bathrooms in the property')),
                ('zestimate', models.DecimalField(decimal_places=2, help_text="Zillow's estimated market value for the property", max_digits=10)),
                ('square_footage', models.IntegerField(help_text='Total interior square footage of the property')),
            ],
            options={
                'indexes': [models.Index(fields=['city'], name='city_idx'), models.Index(fields=['state'], name='state_idx'), models.Index(fields=['city', 'state'], name='city_state_idx')],
            },
        ),
        migrations.CreateModel(
            name='Ownership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage_owned', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('date_acquired', models.DateField()),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ownerships', to='api.owner')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ownerships', to='api.property')),
            ],
        ),
        migrations.AddField(
            model_name='owner',
            name='property',
            field=models.ManyToManyField(through='api.Ownership', to='api.property'),
        ),
        migrations.CreateModel(
            name='MortgageAndDebt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mortgage_date', models.DateField(help_text='The date the mortgage was registered')),
                ('mortgage_amount', models.DecimalField(decimal_places=2, help_text='The amount of the mortgage', max_digits=12)),
                ('interest_rate', models.DecimalField(decimal_places=2, help_text='The interest rate of the mortgage', max_digits=5)),
                ('loan_type', models.CharField(choices=[('PR', 'Primary'), ('SC', 'Secondary')], help_text='The type of loan, e.g., Primary, Secondary', max_length=2)),
                ('lender_name', models.CharField(help_text='The name of the lender', max_length=255)),
                ('property', models.ForeignKey(help_text='The property associated with this mortgage or debt', on_delete=django.db.models.deletion.CASCADE, related_name='mortgages_and_debts', to='api.property')),
            ],
        ),
        migrations.CreateModel(
            name='LegalProceeding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_name', models.CharField(help_text='The name of the legal document', max_length=255)),
                ('case_type', models.CharField(choices=[('FC', 'Foreclosure'), ('LN', 'Lien')], help_text='The type of legal case, e.g., Foreclosure or Lien', max_length=2)),
                ('total_amount_owed', models.DecimalField(decimal_places=2, help_text='The total amount owed in the case', max_digits=12)),
                ('equity', models.DecimalField(decimal_places=2, help_text='Equity amount involved in the legal proceeding', max_digits=12)),
                ('date_of_filing', models.DateField(help_text='The date on which the legal case was filed')),
                ('plaintiff', models.CharField(help_text='The plaintiff in the legal case', max_length=255)),
                ('plaintiff_attorney_firm', models.CharField(help_text='The law firm representing the plaintiff', max_length=255)),
                ('plaintiff_attorney_name', models.CharField(help_text='The name of the attorney representing the plaintiff', max_length=255)),
                ('plaintiff_atty_bar_no', models.CharField(help_text="Bar number of the plaintiff's attorney", max_length=100)),
                ('defendants', models.TextField(help_text='Text field containing the names of all defendants')),
                ('probate_case_number', models.CharField(help_text='Case number if the legal proceeding is a probate case', max_length=100)),
                ('property', models.ForeignKey(help_text='The property involved in the legal proceeding', on_delete=django.db.models.deletion.CASCADE, related_name='legal_proceedings', to='api.property')),
            ],
        ),
        migrations.CreateModel(
            name='Auction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auction_date', models.DateField(help_text='The date on which the auction will take place')),
                ('estimated_resale_value', models.DecimalField(decimal_places=2, help_text='The estimated resale value of the property at auction', max_digits=12)),
                ('opening_bid', models.DecimalField(decimal_places=2, help_text='Starting bid for the auction', max_digits=12)),
                ('estimated_debt', models.DecimalField(decimal_places=2, help_text='Total estimated debt associated with the property', max_digits=12)),
                ('rental_estimate', models.DecimalField(decimal_places=2, help_text='Estimated rental income the property could generate', max_digits=10)),
                ('event_id', models.CharField(help_text='An identifier for the auction event', max_length=100)),
                ('trustee_sale_number', models.CharField(help_text='A unique identifier assigned to the trustee sale', max_length=100)),
                ('link', models.URLField(help_text='A link to the auction event details')),
                ('property', models.ForeignKey(help_text='Reference to the property being auctioned', on_delete=django.db.models.deletion.CASCADE, related_name='auctions', to='api.property')),
            ],
        ),
        migrations.CreateModel(
            name='SalesInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sale_date', models.DateField(help_text='The date on which the sale is completed or expected to be completed')),
                ('sold_amount', models.DecimalField(decimal_places=2, help_text='The amount for which the property was sold', max_digits=12)),
                ('sale_status', models.CharField(choices=[('PD', 'Pending'), ('CL', 'Closed')], help_text='The status of the sale, e.g., Pending or Closed', max_length=2)),
                ('stage', models.CharField(choices=[('IN', 'Initial'), ('FU', 'Follow-Up')], help_text='The stage of the sales process, e.g., Initial or Follow-Up', max_length=2)),
                ('deal_strength', models.CharField(help_text='An assessment of the deal strength or likelihood to close successfully', max_length=100)),
                ('assigned_to', models.ForeignKey(help_text='The user assigned to manage the sale', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('auction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.auction')),
            ],
        ),
        migrations.CreateModel(
            name='TaxLien',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lien_type', models.CharField(help_text='The type of tax lien', max_length=100)),
                ('lien_date', models.DateField(help_text='The date the tax lien was placed')),
                ('lien_amount', models.DecimalField(decimal_places=2, help_text='The amount of the lien', max_digits=12)),
                ('certificate_of_release', models.JSONField(help_text='JSON field containing details about the release of the lien, if applicable')),
                ('property', models.ForeignKey(help_text='The property on which the tax lien is placed', on_delete=django.db.models.deletion.CASCADE, related_name='tax_liens', to='api.property')),
            ],
        ),
    ]
